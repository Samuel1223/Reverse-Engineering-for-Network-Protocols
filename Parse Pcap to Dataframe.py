# -*- coding: utf-8 -*-
"""資策會 讀檔案_多欄位.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_iNeBg7vDgZuV4Xf8P35557wQG9LFX90
"""

! pip install pcapng


"""以下是pcap 檔案

## parsing PCAP 檔案
"""

! pip install scapy

from scapy.all import *

from google.colab import drive
drive.mount('/content/drive')

traffic = rdpcap('/content/drive/My Drive/資策會＿反向工程＿pcap/44818_eth0_00001_20210325095818 (2).pcapng')

traffic

"""### unique IP Addresses"""

unique_ip_address = []

for packet in traffic:
    src = packet[IP].src
    dst = packet[IP].dst
    
    unique_ip_address.append(src)
    unique_ip_address.append(dst)
    
print(set(unique_ip_address))

print(unique_ip_address)

"""### Unique Port Numbers"""

unique_port_address = []

for packet in traffic[TCP]:
    
    sport = packet[TCP].sport
    dport = packet[TCP].dport
    
    unique_port_address.append(sport)
    unique_port_address.append(dport)

print(set(unique_port_address))

traffic[0]

traffic[0].payload

"""## 轉dataframe & df label = 0 好的資料！！"""

traffic[0].payload.id
rows = []

for i in traffic:
    
    len_ = i.payload.len
    id_ = i.payload.id
    frag = i.payload.frag
    ttl = i.payload.ttl
    proto = i.payload.proto
    src =  i.payload.src
    dst =  i.payload.dst
    window = i.payload.window
    
    rows.append((len_, id_,frag, ttl,proto, src,dst, window))
#print(rows)

#for i in rows:
    #print(i)
    
import pandas as pd

df = pd.DataFrame(rows, columns = ['len','id','frag','ttl','proto','src','dst', 'window'])
print(df) 

df['label'] = 0
print(df)

"""## 捏出來的len & label == 1"""

import numpy as np

df_len = df.copy()

np.random.seed(6)

ran_len = np.random.randint(10,1000,14073)
ran_ttl = np.random.randint(100,1000,14073)
ran_window = np.random.randint(10,1000,14073)

df_len['len'] = ran_len
df_len['ttl'] = ran_ttl
df_len['window'] = ran_window

df_len['label'] = 1

df_len

"""## 把他們兩個concate成一個大的dataframe"""

frames = [df,df_len]
result = pd.concat(frames)
result

"""## decision tree"""

from sklearn.model_selection import  train_test_split

X = result.drop(['label','src', 'dst'], axis= 1)
y = result['label']


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)


from sklearn.tree import  DecisionTreeClassifier

dtree = DecisionTreeClassifier()

dtree.fit(X_train, y_train)

predictions = dtree.predict(X_test)

from sklearn.metrics import classification_report, confusion_matrix
print(confusion_matrix(y_test, predictions))

! pip install pydot

X.columns

"""## 反向工程 找threshold"""

from sklearn import tree
text_representation = tree.export_text(dtree)
print(text_representation)

print('stuff')
with open('output.txt','w') as f:
    f.write(cap.stdout)

fig = plt.figure(figsize = (25,20))
_ = tree.plot_tree(dtree, feature_names = list(X.columns), filled = True)

! pip install dtreeviz

! pip install graphviz

! pip install python-graphviz

from dtreeviz.trees import dtreeviz

viz = dtreeviz(dtree,X,y)

viz
plt.savefig('plotviz.png')         #保存图片

viz

"""## SVM

svm
"""

from sklearn.svm import SVC
model_svc = SVC()
model_svc.fit(X_train, y_train)
predictions = model_svc.predict(X_test)

from sklearn.metrics import  classification_report , confusion_matrix
print(confusion_matrix(y_test, predictions))

















"""## test code"""

traffic[0].payload.len

dir(traffic[0].payload)

traffic[0].payload.fields

traffic[0].payload.fieldtype

traffic[0].payload.name

unique_port_address = []
unique_54 = []

for packet in traffic:
    
    if packet.payload.len == 40:
        
        
        src = packet[IP].src
        dst = packet[IP].dst
        
        

        unique_54.append((src,dst))    
#print(unique_54)


count = 0
for i in unique_54:
    print(i)
    count += 1
    
    if count >= 100:
        break
        

        
        
import pandas as pd

df = pd.DataFrame(unique_54, columns = ['src','dst'])
  
print(df)

traffic[0].payload.id
rows = []

for i in traffic:
    
    len_ = i.payload.len
    id_ = i.payload.id
    frag = i.payload.frag
    ttl = i.payload.ttl
    proto = i.payload.proto
    src =  i.payload.src
    dst =  i.payload.dst
    window = i.payload.window
    
    rows.append((len_, id_,frag, ttl,proto, src,dst, window))
#print(rows)

#for i in rows:
    #print(i)
    
import pandas as pd

df = pd.DataFrame(rows, columns = ['len','id','frag','ttl','proto','src','dst', 'window'])
  
print(df)



for packet in traffic:
    print(packet.payload.len)
    print(type(packet.payload.len))
    break

